interface Content {
    """
    ID of the content
    """
    id: UUID!

    """
    Metadata of the content
    """
    metadata: ContentMetadata!
    """
    Progress data of the content for the current user.
    """
    userProgressData: UserProgressData!
    """
    Progress data of the specified user.
    """
    progressDataForUser(userId: UUID!): UserProgressData!
    """
    For the current user, returns true if this content could be worked on by the user (i.e. it is not locked), false
    if content is not available to be worked on (e.g. because previous stage has not been completed)
    """
    isAvailableToBeWorkedOn: Boolean!
    """
    If this content is part of a stage (of a section), this field indicates whether the content is required to be
    completed or optional. If the content is not part of a stage, this field is ignored.
    """
    required: Boolean
}

type ContentMetadata {
    """
    Name of the content
    """
    name: String!
    """
    Content type
    """
    type: ContentType!
    """
    Suggested date when the content should be done
    """
    suggestedDate: DateTime!
    """
    Number of reward points a student receives for completing this content
    """
    rewardPoints: Int!
    """
    ID of the chapter this content is associated with
    """
    chapterId: UUID!
    """
    ID of the course this content is associated with
    """
    courseId: UUID!
    """
    TagNames this content is tagged with
    """
    tagNames: [String!]!
}

type MediaContent implements Content {
    # Inherited fields
    """
    ID of the content
    """
    id: UUID!

    """
    Metadata of the content
    """
    metadata: ContentMetadata!

    """
    Progress data of the content for the current user.
    """
    userProgressData: UserProgressData!
    """
    Progress data of the specified user.
    """
    progressDataForUser(userId: UUID!): UserProgressData!
    """
    For the current user, returns true if this content could be worked on by the user (i.e. it is not locked), false
    if content is not available to be worked on (e.g. because previous stage has not been completed)
    """
    isAvailableToBeWorkedOn: Boolean!
    """
    If this content is part of a stage (of a section), this field indicates whether the content is required to be
    completed or optional. If the content is not part of a stage, this field is ignored.
    """
    required: Boolean
}

interface Assessment implements Content {

    """
    Assessment metadata
    """
    assessmentMetadata: AssessmentMetadata!

    # inherited fields
    """
    ID of the content
    """
    id: UUID!
    """
    Metadata of the content
    """
    metadata: ContentMetadata!
    """
    Progress data of the content for the current user.
    """
    userProgressData: UserProgressData!
    """
    Progress data of the specified user.
    """
    progressDataForUser(userId: UUID!): UserProgressData!
    """
    the items that belong to the Assessment
    """
    items:[Item!]!
    """
    For the current user, returns true if this content could be worked on by the user (i.e. it is not locked), false
    if content is not available to be worked on (e.g. because previous stage has not been completed)
    """
    isAvailableToBeWorkedOn: Boolean!
    """
    If this content is part of a stage (of a section), this field indicates whether the content is required to be
    completed or optional. If the content is not part of a stage, this field is ignored.
    """
    required: Boolean
}

type AssessmentMetadata {
    """
    Number of skill points a student receives for completing this content
    """
    skillPoints: Int! # TODO skill concept done in the future
    """
    Type of the assessment
    """
    skillTypes: [SkillType!]!
    """
    The initial learning interval for the assessment in days.
    This is the interval that is applied after the assessment is completed the first time.
    Following intervals are calculated based on the previous interval and the user's performance.
    If this is null, the assessment will never be scheduled for review, which
    is useful for assessments that are not meant to be repeated.
    """
    initialLearningInterval: Int
    """
    If this content is part of a stage (of a section), this field indicates whether the content is required to be
    completed or optional. If the content is not part of a stage, this field is ignored.
    """
    required: Boolean
}

"""
A set of flashcards, flashcard related fields are stored in the flashcard service.
"""
type FlashcardSetAssessment implements Assessment & Content {
    # inherited fields
    """
    Assessment metadata
    """
    assessmentMetadata: AssessmentMetadata!
    """
    ID of the content
    """
    id: UUID!
    """
    Metadata of the content
    """
    metadata: ContentMetadata!

    """
    Progress data of the content for the current user.
    """
    userProgressData: UserProgressData!
    """
    Progress data of the specified user.
    """
    progressDataForUser(userId: UUID!): UserProgressData!

    """
    the items that belong to the Flashcard
    """
    items:[Item!]!
    """
    For the current user, returns true if this content could be worked on by the user (i.e. it is not locked), false
    if content is not available to be worked on (e.g. because previous stage has not been completed)
    """
    isAvailableToBeWorkedOn: Boolean!
    """
    If this content is part of a stage (of a section), this field indicates whether the content is required to be
    completed or optional. If the content is not part of a stage, this field is ignored.
    """
    required: Boolean
}

"""
A quiz, quiz related fields are stored in the quiz service.
"""
type QuizAssessment implements Assessment & Content {
    # inherited fields
    """
    Assessment metadata
    """
    assessmentMetadata: AssessmentMetadata!
    """
    ID of the content
    """
    id: UUID!
    """
    Metadata of the content
    """
    metadata: ContentMetadata!

    """
    Progress data of the content for the current user.
    """
    userProgressData: UserProgressData!
    """
    Progress data of the specified user.
    """
    progressDataForUser(userId: UUID!): UserProgressData!
    """
    the items that belong to the Quiz
    """
    items:[Item!]!
    """
    For the current user, returns true if this content could be worked on by the user (i.e. it is not locked), false
    if content is not available to be worked on (e.g. because previous stage has not been completed)
    """
    isAvailableToBeWorkedOn: Boolean!
    """
    If this content is part of a stage (of a section), this field indicates whether the content is required to be
    completed or optional. If the content is not part of a stage, this field is ignored.
    """
    required: Boolean
}

"""
An assignment, assignment related fields are stored in the assignment service.
"""
type AssignmentAssessment implements Assessment & Content {
    # inherited fields
    """
    Assessment metadata
    """
    assessmentMetadata: AssessmentMetadata!
    """
    ID of the content
    """
    id: UUID!
    """
    Metadata of the content
    """
    metadata: ContentMetadata!

    """
    Progress data of the content for the current user.
    """
    userProgressData: UserProgressData!
    """
    Progress data of the specified user.
    """
    progressDataForUser(userId: UUID!): UserProgressData!
    """
    the items that belong to the Assignment
    """
    items:[Item!]!
    """
    For the current user, returns true if this content could be worked on by the user (i.e. it is not locked), false
    if content is not available to be worked on (e.g. because previous stage has not been completed)
    """
    isAvailableToBeWorkedOn: Boolean!
    """
    If this content is part of a stage (of a section), this field indicates whether the content is required to be
    completed or optional. If the content is not part of a stage, this field is ignored.
    """
    required: Boolean
}

"""
An item is a part of an assessment. Based on students' performances on items the SkillLevel Service estimates a students knowledge.
An item is something like a question in a quiz, a flashcard of a flashcard set.
"""
type Item{
    """
    the id of the item
    """
    id:UUID!
    """
    The skills or the competencies the item belongs to.
    """
    associatedSkills:[Skill!]!
    """
    The Level of Blooms Taxonomy the item belongs to
    """
    associatedBloomLevels:[BloomLevel!]!
}
"""
a skill or compentency.
Something like loops or data structures.
"""
type Skill {
    """
    the id of a skill
    """
    id:UUID!
    """
    the name of the skill
    """
    skillName:String!
    """
    the category of the skill
    """
    skillCategory:String!
    """
    whether the skill is a custom-created by the user and no IEEE skill
    """
    isCustomSkill:Boolean!
}

# add more types here

"""
Type of the assessment
"""
enum SkillType {
    CREATE
    EVALUATE
    REMEMBER
    UNDERSTAND
    APPLY
    ANALYZE
}

# for filtering
"""
Type of the content
"""
enum ContentType {
    MEDIA
    FLASHCARDS
    QUIZ
    ASSIGNMENT
    # add more types here
}